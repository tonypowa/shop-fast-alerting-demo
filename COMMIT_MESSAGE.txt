feat: Add complete Grafana alerting demo stack (ShopFast e-commerce)

Create a comprehensive, production-ready demo environment for showcasing
Grafana alerting capabilities across multiple data sources during technical
presentations and training sessions.

## Overview
- Complete Docker Compose stack with 9 services
- Demonstrates alerting on metrics (Prometheus), logs (Loki), and business data (PostgreSQL)
- Realistic e-commerce scenario with inventory management
- 7 pre-configured alert rules across all data source types
- Interactive simulation scripts for triggering alerts

## Architecture Components

### Data Sources (3)
- **Prometheus**: Metrics collection and alerting (CPU, latency, error rates)
- **Loki + Promtail**: Log aggregation and pattern-based alerting
- **PostgreSQL**: Business database with inventory and security data

### Microservices (4)
- **API Service** (port 8080): Product catalog, order processing, REST API
- **Frontend Service** (port 8081): User interface simulation, page views
- **Payment Service** (port 8082): Payment processing with failure scenarios
- **Inventory Service** (port 8083): Real-time stock monitoring

### Observability Stack
- **Grafana 12.0.0**: Dashboard and alerting interface
- **Prometheus**: Time-series metrics storage
- **Loki**: Log storage and querying
- **PostgreSQL 15**: Transactional database with sample data

## Alert Rules (7)

### Prometheus-based (3)
1. **High CPU Usage**: CPU > 70% for 1 minute
2. **High Error Rate**: 5xx errors > 10% for 2 minutes
3. **Slow Response Time**: 95th percentile > 1 second for 3 minutes

### Loki-based (1)
4. **Payment Service Failures**: >5 errors in 5 minutes

### PostgreSQL-based (3)
5. **Low Inventory Warning**: Products at or below threshold
6. **Critical Inventory Alert**: Products with ≤5 units
7. **Failed Login Attempts**: ≥5 failed logins in 5 minutes (security)

## Simulation Scenarios

Interactive Python scripts to trigger alerts:
- Normal e-commerce traffic baseline
- Flash sale (rapid inventory depletion)
- Payment failures (log-based alerts)
- High CPU load (infrastructure alerts)
- Security breach (failed login attempts)
- Gradual inventory depletion

## Files Added

### Core Infrastructure
- docker-compose.yml: Orchestrates all 9 services
- .gitignore: Excludes logs, volumes, and build artifacts

### Microservices (Python/Flask)
- services/api/: Order processing and product catalog
- services/frontend/: Web interface simulation
- services/payment/: Payment processing with failure modes
- services/inventory/: Stock level monitoring and metrics

### Configuration
- grafana/provisioning/datasources/: Auto-configured data sources (UIDs: prometheus, loki, postgres)
- grafana/provisioning/alerting/: 7 alert rule definitions
- grafana/provisioning/dashboards/: Dashboard provisioning config
- prometheus/prometheus.yml: Service discovery and scrape config
- loki/loki-config.yml: Log storage configuration
- loki/promtail-config.yml: Log collection from all services
- postgres/init.sql: Database schema and sample data (10 products, 5 customers)

### Simulation & Control
- simulation/simulator.py: Traffic generator with 7 scenarios
- simulation/requirements.txt: Python dependencies
- demo-control.sh/bat: Interactive inventory management for demos

### Documentation
- README.md: Complete setup and usage guide
- QUICKSTART.md: 5-minute getting started guide
- DATABASE_SCHEMA.md: Full database documentation with queries
- ARCHITECTURE.md: System architecture and data flow diagrams
- PROJECT_SUMMARY.md: Project overview and features
- CREATE_ALERTS_MANUALLY.md: Step-by-step UI alert creation guide
- TALK_NOTES.md: Presentation script with timing and tips
- TROUBLESHOOTING.md: Common issues and solutions
- make-alerts-editable.md: Guide for making provisioned alerts editable

### Startup Scripts
- start-demo.sh/bat: Quick start scripts for all platforms

## Technical Details

### Technologies
- **Backend**: Python 3.11, Flask
- **Database**: PostgreSQL 15 with sample e-commerce data
- **Monitoring**: Prometheus (latest), Loki (latest), Grafana 12.0.0
- **Containerization**: Docker Compose v3.8

### Features
- Pre-populated database with 10 products, realistic stock levels
- All services expose Prometheus metrics at /metrics
- Structured logging to files collected by Promtail
- Database queries optimized with indexes
- Alert rules support both evaluation and testing
- Complete separation of concerns across services

### Data Source Configuration
- Prometheus: http://prometheus:9090 (UID: prometheus)
- Loki: http://loki:3100 (UID: loki)
- PostgreSQL: postgres:5432/shopfast (UID: postgres)

## Use Cases

### For Presentations
- Demonstrate multi-source alerting capabilities
- Show real-world business metric alerting (not just infrastructure)
- Interactive scenarios to trigger alerts on demand
- Clear visualization of alert states and transitions

### For Training
- Hands-on learning environment for Grafana alerting
- Examples of PromQL, LogQL, and SQL alert queries
- Best practices for alert design and evaluation
- Testing different alert conditions and thresholds

## Testing Instructions

1. Start stack: `docker-compose up -d`
2. Access Grafana: http://localhost:3000 (admin/admin)
3. Verify data sources in Configuration → Data Sources
4. Run simulation: `cd simulation && python simulator.py flash-sale`
5. Watch alerts fire in Alerting → Alert rules

## Notes

- All services are configured for demo purposes (not production-ready security)
- Default credentials are admin/admin and shopfast/shopfast123
- Services auto-restart and include health checks
- Logs are collected in ./logs/ directory
- Data persists in Docker volumes between restarts

## Future Enhancements

Potential additions documented in PROJECT_SUMMARY.md:
- Grafana OnCall integration
- Additional data sources (InfluxDB, Elasticsearch)
- Kubernetes deployment manifests
- CI/CD pipeline examples
- Custom dashboard templates
- Distributed tracing with Tempo

---

This demo stack provides a complete, self-contained environment for
showcasing Grafana's powerful alerting capabilities across metrics,
logs, and structured data sources in a realistic e-commerce scenario.

